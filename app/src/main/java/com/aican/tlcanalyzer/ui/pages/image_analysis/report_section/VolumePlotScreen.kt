package com.aican.tlcanalyzer.ui.pages.image_analysis.report_section


import android.graphics.Bitmap
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import com.aican.tlcanalyzer.data.database.project.entities.ContourData
import com.aican.tlcanalyzer.ui.components.topbar_navigation.CustomTopBar
import com.aican.tlcanalyzer.ui.pages.image_analysis.components.TableScreen
import com.aican.tlcanalyzer.utils.AppUtils.getColorByIndex
import com.github.mikephil.charting.charts.BarChart
import com.github.mikephil.charting.data.BarData
import com.github.mikephil.charting.data.BarDataSet
import com.github.mikephil.charting.data.BarEntry
import com.github.mikephil.charting.formatter.ValueFormatter
import com.aican.tlcanalyzer.viewmodel.project.ImageAnalysisViewModel

@Composable
fun VolumePlotScreen(
    modifier: Modifier = Modifier,
    imageAnalysisViewModel: ImageAnalysisViewModel,

    ) {
    val contourDataList by imageAnalysisViewModel.allAutoGeneratedSpotsData.collectAsState()

    Scaffold(
        topBar = {
            CustomTopBar(
                title = "Volume Plot",
                onBackClick = { /* Handle back navigation */ }
            )
        },
    ) { internalPadding ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(internalPadding)
        ) {
            if (contourDataList.isNotEmpty()) {
                item {
                    Spacer(modifier = Modifier.height(18.dp))

                    BarGraph(contourDataList = contourDataList) {

                    }
                }

                item {
                    Spacer(modifier = Modifier.height(8.dp))

                    TableScreen(contourDataList)
                }

            } else {
                item {
                    Text(
                        text = "No volume data available",
                        color = Color.Red
                    )
                }

            }
        }

    }

}

@Composable
fun BarGraph(
    contourDataList: List<ContourData>, onBitmapCaptured: (Bitmap?) -> Unit
) {
    AndroidView(
        modifier = Modifier
            .fillMaxWidth()
            .height(300.dp),
        factory = { context ->
            BarChart(context).apply {
                description.isEnabled = false
                legend.isEnabled = true
                axisRight.isEnabled = false
                setPinchZoom(true)
                setDrawGridBackground(false)
                setDrawBarShadow(false)
                setScaleEnabled(true)

                xAxis.apply {
                    isGranularityEnabled = true
                    granularity = 1f
                    setDrawGridLines(false)
                    textColor = android.graphics.Color.DKGRAY
                }

                axisLeft.apply {
                    setDrawGridLines(true)
                    textColor = android.graphics.Color.DKGRAY
                }
            }
        },
        update = { chart ->
            // Prepare the data
            val barEntries = mutableListOf<BarEntry>()
            val labels = mutableListOf<String>()
            contourDataList.forEachIndexed { index, contour ->
                barEntries.add(BarEntry(index.toFloat(), contour.volume.toFloat()))
                labels.add(contour.name)
            }

            val barDataSet = BarDataSet(barEntries, "Volume Data").apply {
                valueTextColor = android.graphics.Color.BLACK
                valueTextSize = 10f
            }

            // Assign different colors based on index
            val colors = contourDataList.mapIndexed { index, _ ->
                getColorByIndex(index)
            }
            barDataSet.colors = colors.map { android.graphics.Color.parseColor(it) }

            // Add a custom ValueFormatter for labels
            chart.xAxis.valueFormatter = object : ValueFormatter() {
                override fun getFormattedValue(value: Float): String {
                    return labels.getOrNull(value.toInt()) ?: value.toString()
                }
            }

            // Set data and update chart
            chart.data = BarData(barDataSet).apply {
                barWidth = 0.9f
            }
            chart.invalidate()

            chart.post {
                try {
                    onBitmapCaptured.invoke(chart.chartBitmap)

                } catch (e: Exception) {
                    onBitmapCaptured.invoke(null)
                }
            }
        }
    )

}

